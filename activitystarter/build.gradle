import org.gradle.internal.jvm.Jvm

buildscript {
  repositories {
    mavenCentral()
  }

  dependencies {
    classpath 'com.github.dcendents:android-maven-gradle-plugin:1.5'
  }
}

apply plugin: 'com.android.library'
apply plugin: 'com.github.dcendents.android-maven'

group='com.github.marcinmoskala'

android {
  compileSdkVersion rootProject.ext.compileSdkVersion
  buildToolsVersion rootProject.ext.buildToolsVersion

  defaultConfig {
    minSdkVersion rootProject.ext.minSdkVersion

    consumerProguardFiles 'proguard-rules.txt'

    testInstrumentationRunner 'android.support.test.runner.AndroidJUnitRunner'
  }
}

dependencies {
  compile project(':activitystarter-annotations')
  compile deps.supportAnnotations
  compile deps.supportCompat

  androidTestCompile deps.junit
  androidTestCompile deps.truth
  androidTestCompile deps.supportTestRunner

  testCompile deps.junit
  testCompile deps.truth
  testCompile deps.compiletesting
  testCompile files(getRuntimeJar())
  testCompile files(Jvm.current().getToolsJar())
  testCompile project(':activitystarter-compiler')
}

def getRuntimeJar() {
  try {
    final File javaBase = new File(System.getProperty("java.home")).getCanonicalFile();
    File runtimeJar = new File(javaBase, "lib/rt.jar");
    if (runtimeJar.exists()) {
      return runtimeJar;
    }
    runtimeJar = new File(javaBase, "jre/lib/rt.jar");
    return runtimeJar.exists() ? runtimeJar : null;
  } catch (IOException e) {
    throw new RuntimeException(e);
  }
}